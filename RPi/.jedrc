%   User Initialization file for the JED editor  -*- slang -*-

if (BATCH == 0)
{

%%--------------------------------------------------------------------------
%% JED global variables  --- defaults shown
%%--------------------------------------------------------------------------
#ifdef VMS UNIX
USE_ANSI_COLORS = 1;
#endif
No_Backups = 1;
Startup_With_File = -1;
DISPLAY_TIME    = 1;
LINENUMBERS   = 2;
HIGHLIGHT   = 1;
WANT_SYNTAX_HIGHLIGHT = 1;
#ifdef IBMPC_SYSTEM
  HORIZONTAL_PAN  = -1; % For msdos, panning window might be better:
#else
  HORIZONTAL_PAN  = 20;
#endif

BLINK       = 1;
TAB_DEFAULT = 4;
USE_TABS    = 0;
TAB         = 4;

Tab_Always_Inserts_Tab = 1;

WRAP_DEFAULT = 78;
ADD_NEWLINE = 1;
IGNORE_BEEP = 3;
_traceback  = 0;
WRAP_INDENTS = 1;
CASE_SEARCH = 0;
KILL_LINE_FEATURE = 0;
REPLACE_PRESERVE_CASE = 1;

#ifdef IBMPC_SYSTEM
Case_Sensitive_Filenames = 0;
#endif

%mute_set_mute_keys (" ^ ~ ' ` \d168 \d180 \"  ");  % choose all or subset
META_CHAR   = -1;   % All chars with hi bit set will self insert

#ifdef IBMPC_SYSTEM
   DISPLAY_EIGHT_BIT = 128;
#else
   DISPLAY_EIGHT_BIT = 160; % Other systems assume ISO Latin 1
#endif

#ifdef WIN32
variable W32shell_Perform_Globbing = 0;
#endif

%%--------------------------------------------------------------------------
%% User Information (used by some modes, automatically determined on Unix)
%%--------------------------------------------------------------------------
set_realname ("Jeremy Bae");
set_username ("jb");
set_hostname ("ramen.mewmoe.xyz");
set_emailaddress ("jb@ramen.mewmoe.xyz");

%%--------------------------------------------------------------------------
%% Menu config
%%--------------------------------------------------------------------------
menu_set_menu_bar_prefix ("Global", "");    % delete annoying 'F10 key ==> '

%%--------------------------------------------------------------------------
%% Color Settings
%%--------------------------------------------------------------------------
_Jed_Default_Color_Scheme = "black3";
set_color_scheme("amber-m");

Highlight_Whitespace = 3;
set_color ("tab", "default", "green");

%%--------------------------------------------------------------------------
%% Teminal Settings
%%--------------------------------------------------------------------------
#ifdef UNIX
if (0)
{
   $1 = "vt102 vt200 vt220 vt300 vt320 vt420 xterms";
   if (is_substr($1, getenv("TERM"))) set_term_vtxxx(0);
}
#endif

%%--------------------------------------------------------------------------
%% Enable Emacs keybinding
%%--------------------------------------------------------------------------
() = evalfile("emacs");

%%--------------------------------------------------------------------------
%% Keyboard Settings
%%--------------------------------------------------------------------------
setkey ("next_buffer (0)", "^X,");
setkey ("next_buffer (1)", "^X.");
setkey ("search_current_word(-1)", "\e&");  % Alt-&
setkey ("search_current_word(1)", "\e*");   % Alt-*
% unsetkey("\ec");
setkey ("copy_word_as_kill()", "^cw");
setkey ("copy_line_as_kill()", "^cl");
setkey("duplicate_line", "^cd");

setkey ("toggle_line_number_mode", "\e[20~"); % F9
setkey ("toggle_line_number_mode", "^Xz");
enable_top_status_line(1);
auto_compression_mode(1);
% setkey ("self_insert_cmd", "\t");

unsetkey("\ef");
setkey("skip_word", "\ef");
unsetkey("\eb");
setkey("bskip_word", "\eb");
% unsetkey("\ee");
% setkey("eol_cmd", "\ee");
% unsetkey("\ea");
% setkey("beg_of_line", "\ea");
% unsetkey("\ei");
% unsetkey("\es");
% unsetkey("\eu");
% unsetkey("^H");
% unsetkey("`");
% setkey("self_insert_cmd", "`");

unsetkey("^K");
setkey("push_spot();bol();push_mark();down_1();yp_copy_region_as_kill();pop_spot();delete_line();", "^K");
% %setkey("bol();if(eolp()==0)emacs_yp_kill_line();emacs_yp_kill_line();", "^K");
unsetkey("^J");
setkey("emacs_yp_kill_line();", "^J");
% unsetkey("^V");
% setkey("yp_yank();", "^V");
setkey("yp_yank();", "^Xv");
% setkey("beg_of_line", "\eOH");
% setkey("eol_cmd", "\eOF");

% setkey("bufed()", "^Z");
setkey("bufed()", "^X^Z");
% setkey("dired()", "^X^Z");
% unsetkey("^X^F");
% setkey("dired()", "^X^F");
setkey("smart_set_mark_cmd", "^Q");
% setkey("one_window", "\el");
% setkey("change_color_for_old_terminal", "\e[23~");    #F11
setkey("change_color_for_old_terminal", "^Xa");
% setkey("change_color_for_new_terminal", "\e[24~");    #F12
setkey("change_color_for_new_terminal", "^Xc");

% Tab tweak
%setkey("self_insert_cmd", "^I");

%%--------------------------------------------------------------------------
%% Programming config
%%--------------------------------------------------------------------------

%---------------------------------------------------------------------------
% Ctags config
%---------------------------------------------------------------------------
unsetkey("^X=");
setkey("ctags_find", "^X=");
setkey("ctags_backward", "^X[");
setkey("ctags_forward", "^X]");

% Add perl extension for Nikto
add_mode_for_extension("perl", "plugin");

% Add bash extension
add_mode_for_extension("sh", "bash_aliases");
add_mode_for_extension("sh", "bash_functions");
add_mode_for_extension("sh", "bashrc");
add_mode_for_extension("sh", "bash_logout");

%---------------------------------------------------------------------------
% C-mode indentation style
%---------------------------------------------------------------------------
c_set_style ("linux"); % or "linux", "gnu", "bsd", "k&r"

variable Compile_Default_Compiler = "gcc";           % GNU compiler


% help();               % Pops up a help window

}  %Batch


%%%-------------------------------------------------------------------------
%%%  Hooks:  read jed/doc/hooks.sl for more information
%%%-------------------------------------------------------------------------
%
% public define global_mode_hook (hook_name)
% {
%    % if (hook_name != "c_mode_hook")
%    %   local_setkey ("self_insert_cmd", "\t");
%     local_setkey ("self_insert_cmd", "\t");
% }
% setkey ("self_insert_cmd", "\t");

define dired_hook ()
{
    local_unsetkey ("^K");
    local_setkey ("dired_kill_line", "^K");
}

define text_mode_hook (mode)
{
    local_setkey ("indent_line", "\t");
}

public define global_mode_hook (hook_name)
{
    local_setkey ("insert_simulated_tab", "\t");
}

public define insert_simulated_tab ()
{
    insert_spaces (TAB - (what_column () - 1) mod TAB);
}

public define global_mode_hook (hook_name)
{
    set_line_number_mode (1);
}


%%%-------------------------------------------------------------------------
%%%  Utility functions
%%%-------------------------------------------------------------------------

define next_buffer (previous)
{
    variable n, buf;
    n = buffer_list (); % get the buffers on the stack
    if (previous)
    {
        _stk_reverse (n-1);
    }
    loop (n) {
        buf = ();
        n--;
        % Skip *scratch* and other buffers that are not of interest.
        if ((buf[0] == '*') or (buf[0] == ' '))
        {
            continue;
        }
        sw2buf (buf);
        _pop_n (n);
        return;
    }
}

autoload("get_word", "txtutils");
define search_current_word(direction)
{
    variable word;
    variable mark;
    variable result;
    variable s1;
    mark = create_user_mark();
    skip_word();
    bskip_word();
    word = get_word();
    if (direction == 1)
    {
        while (1)
        {
            go_right_1();
            result = fsearch(word);
            if (result == 0)
            {
                break;
            }
            % Search again if the word is a substring of a longer word.
            s1 = get_word();
            !if (strcmp(s1, word))
            {
                break;
            }
        }
    }
    else
    {
        while (1)
        {
            result = bsearch(word);
            if (result == 0)
            {
                break;
            }
            % Search again if the word is a substring of a longer word.
            s1 = get_word();
            !if (strcmp(s1, word))
            {
                break;
            }
        }
    }
    if (result == 0)
    {
        goto_user_mark(mark);
        message(word + " not found");
    }
}

% define_word("_A-Za-z0-9");

autoload("yp_copy_region_as_kill", "yankpop");
autoload("mark_word", "txtutils");
define copy_word_as_kill()
{
    variable s1;
    push_spot();
    mark_word();
    () = dupmark();
    s1 = bufsubstr();
    yp_copy_region_as_kill();
    pop_spot();
    message("\"" + s1 + "\" copied to kill ring");
}

define copy_line_as_kill()
{
    variable s1;
    push_spot();
    bol();
    set_mark_cmd();
    down(1);
    yp_copy_region_as_kill();
    pop_spot();
    message("line copied to kill ring");
}

define duplicate_line()
{
    variable col;
    push_spot();
    col = what_column();
    bol();
    push_mark();
    down_1();
    yp_copy_region_as_kill();
    yp_yank();
    pop_spot();
    down_1();
    goto_column(col);
}

define trim_trailing_whitespace()
{
    % remove whitespace at end of lines
    push_spot_bob();
    do {
        eol_trim();
    }
    while (down_1());

    % remove empty lines at end of buffer
    eob();
    do {
        go_left_1();
        if (bolp() and eolp())
            del();
        }
    while (bolp());

    pop_spot();
    !if (BATCH) message ("done.");
}

add_to_hook("_jed_save_buffer_before_hooks", &trim_trailing_whitespace);

define change_color_for_old_terminal()
{
    set_color_scheme("amber-m");
}

define change_color_for_new_terminal()
{
    set_color_scheme("amber");
}
